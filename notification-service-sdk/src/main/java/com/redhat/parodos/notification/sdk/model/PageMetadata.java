/*
 * Parodos Notification Service API
 * This is the API documentation for the Parodos Notification Service. It provides operations to send out and check notification. The endpoints are secured with oAuth2/OpenID and cannot be accessed without a valid token.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.notification.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.redhat.parodos.notification.sdk.api.JSON;

/**
 * PageMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PageMetadata {

	public static final String SERIALIZED_NAME_NUMBER = "number";

	@SerializedName(SERIALIZED_NAME_NUMBER)
	private Long number;

	public static final String SERIALIZED_NAME_SIZE = "size";

	@SerializedName(SERIALIZED_NAME_SIZE)
	private Long size;

	public static final String SERIALIZED_NAME_TOTAL_ELEMENTS = "totalElements";

	@SerializedName(SERIALIZED_NAME_TOTAL_ELEMENTS)
	private Long totalElements;

	public static final String SERIALIZED_NAME_TOTAL_PAGES = "totalPages";

	@SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
	private Long totalPages;

	public PageMetadata() {
	}

	public PageMetadata number(Long number) {

		this.number = number;
		return this;
	}

	/**
	 * Get number
	 * @return number
	 **/
	@javax.annotation.Nullable

	public Long getNumber() {
		return number;
	}

	public void setNumber(Long number) {
		this.number = number;
	}

	public PageMetadata size(Long size) {

		this.size = size;
		return this;
	}

	/**
	 * Get size
	 * @return size
	 **/
	@javax.annotation.Nullable

	public Long getSize() {
		return size;
	}

	public void setSize(Long size) {
		this.size = size;
	}

	public PageMetadata totalElements(Long totalElements) {

		this.totalElements = totalElements;
		return this;
	}

	/**
	 * Get totalElements
	 * @return totalElements
	 **/
	@javax.annotation.Nullable

	public Long getTotalElements() {
		return totalElements;
	}

	public void setTotalElements(Long totalElements) {
		this.totalElements = totalElements;
	}

	public PageMetadata totalPages(Long totalPages) {

		this.totalPages = totalPages;
		return this;
	}

	/**
	 * Get totalPages
	 * @return totalPages
	 **/
	@javax.annotation.Nullable

	public Long getTotalPages() {
		return totalPages;
	}

	public void setTotalPages(Long totalPages) {
		this.totalPages = totalPages;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		PageMetadata pageMetadata = (PageMetadata) o;
		return Objects.equals(this.number, pageMetadata.number) && Objects.equals(this.size, pageMetadata.size)
				&& Objects.equals(this.totalElements, pageMetadata.totalElements)
				&& Objects.equals(this.totalPages, pageMetadata.totalPages);
	}

	@Override
	public int hashCode() {
		return Objects.hash(number, size, totalElements, totalPages);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class PageMetadata {\n");
		sb.append("    number: ").append(toIndentedString(number)).append("\n");
		sb.append("    size: ").append(toIndentedString(size)).append("\n");
		sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
		sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("number");
		openapiFields.add("size");
		openapiFields.add("totalElements");
		openapiFields.add("totalPages");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to PageMetadata
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!PageMetadata.openapiRequiredFields.isEmpty()) { // has required fields
																	// but JSON object is
																	// null
				throw new IllegalArgumentException(
						String.format("The required field(s) %s in PageMetadata is not found in the empty JSON string",
								PageMetadata.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!PageMetadata.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `PageMetadata` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!PageMetadata.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes 'PageMetadata' and its subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<PageMetadata> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(PageMetadata.class));

			return (TypeAdapter<T>) new TypeAdapter<PageMetadata>() {
				@Override
				public void write(JsonWriter out, PageMetadata value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public PageMetadata read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of PageMetadata given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of PageMetadata
	 * @throws IOException if the JSON string is invalid with respect to PageMetadata
	 */
	public static PageMetadata fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, PageMetadata.class);
	}

	/**
	 * Convert an instance of PageMetadata to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
