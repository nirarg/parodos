/*
 * Parodos Notification Service API
 * This is the API documentation for the Parodos Notification Service. It provides operations to send out and check notification. The endpoints are secured with oAuth2/OpenID and cannot be accessed without a valid token.
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.redhat.parodos.notification.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.redhat.parodos.notification.sdk.model.Link;
import com.redhat.parodos.notification.sdk.model.NotificationRecordResponseDTO;
import com.redhat.parodos.notification.sdk.model.PageMetadata;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.redhat.parodos.notification.sdk.api.JSON;

/**
 * PagedModelNotificationRecordResponseDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class PagedModelNotificationRecordResponseDTO {

	public static final String SERIALIZED_NAME_CONTENT = "content";

	@SerializedName(SERIALIZED_NAME_CONTENT)
	private List<NotificationRecordResponseDTO> content = new ArrayList<>();

	public static final String SERIALIZED_NAME_LINKS = "links";

	@SerializedName(SERIALIZED_NAME_LINKS)
	private List<Link> links = new ArrayList<>();

	public static final String SERIALIZED_NAME_PAGE = "page";

	@SerializedName(SERIALIZED_NAME_PAGE)
	private PageMetadata page;

	public PagedModelNotificationRecordResponseDTO() {
	}

	public PagedModelNotificationRecordResponseDTO content(List<NotificationRecordResponseDTO> content) {

		this.content = content;
		return this;
	}

	public PagedModelNotificationRecordResponseDTO addContentItem(NotificationRecordResponseDTO contentItem) {
		if (this.content == null) {
			this.content = new ArrayList<>();
		}
		this.content.add(contentItem);
		return this;
	}

	/**
	 * Get content
	 * @return content
	 **/
	@javax.annotation.Nullable

	public List<NotificationRecordResponseDTO> getContent() {
		return content;
	}

	public void setContent(List<NotificationRecordResponseDTO> content) {
		this.content = content;
	}

	public PagedModelNotificationRecordResponseDTO links(List<Link> links) {

		this.links = links;
		return this;
	}

	public PagedModelNotificationRecordResponseDTO addLinksItem(Link linksItem) {
		if (this.links == null) {
			this.links = new ArrayList<>();
		}
		this.links.add(linksItem);
		return this;
	}

	/**
	 * Get links
	 * @return links
	 **/
	@javax.annotation.Nullable

	public List<Link> getLinks() {
		return links;
	}

	public void setLinks(List<Link> links) {
		this.links = links;
	}

	public PagedModelNotificationRecordResponseDTO page(PageMetadata page) {

		this.page = page;
		return this;
	}

	/**
	 * Get page
	 * @return page
	 **/
	@javax.annotation.Nullable

	public PageMetadata getPage() {
		return page;
	}

	public void setPage(PageMetadata page) {
		this.page = page;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		PagedModelNotificationRecordResponseDTO pagedModelNotificationRecordResponseDTO = (PagedModelNotificationRecordResponseDTO) o;
		return Objects.equals(this.content, pagedModelNotificationRecordResponseDTO.content)
				&& Objects.equals(this.links, pagedModelNotificationRecordResponseDTO.links)
				&& Objects.equals(this.page, pagedModelNotificationRecordResponseDTO.page);
	}

	@Override
	public int hashCode() {
		return Objects.hash(content, links, page);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class PagedModelNotificationRecordResponseDTO {\n");
		sb.append("    content: ").append(toIndentedString(content)).append("\n");
		sb.append("    links: ").append(toIndentedString(links)).append("\n");
		sb.append("    page: ").append(toIndentedString(page)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the
	 * first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	public static HashSet<String> openapiFields;

	public static HashSet<String> openapiRequiredFields;

	static {
		// a set of all properties/fields (JSON key names)
		openapiFields = new HashSet<String>();
		openapiFields.add("content");
		openapiFields.add("links");
		openapiFields.add("page");

		// a set of required properties/fields (JSON key names)
		openapiRequiredFields = new HashSet<String>();
	}

	/**
	 * Validates the JSON Object and throws an exception if issues found
	 * @param jsonObj JSON Object
	 * @throws IOException if the JSON Object is invalid with respect to
	 * PagedModelNotificationRecordResponseDTO
	 */
	public static void validateJsonObject(JsonObject jsonObj) throws IOException {
		if (jsonObj == null) {
			if (!PagedModelNotificationRecordResponseDTO.openapiRequiredFields.isEmpty()) { // has
																							// required
																							// fields
																							// but
																							// JSON
																							// object
																							// is
																							// null
				throw new IllegalArgumentException(String.format(
						"The required field(s) %s in PagedModelNotificationRecordResponseDTO is not found in the empty JSON string",
						PagedModelNotificationRecordResponseDTO.openapiRequiredFields.toString()));
			}
		}

		Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
		// check to see if the JSON string contains additional fields
		for (Entry<String, JsonElement> entry : entries) {
			if (!PagedModelNotificationRecordResponseDTO.openapiFields.contains(entry.getKey())) {
				throw new IllegalArgumentException(String.format(
						"The field `%s` in the JSON string is not defined in the `PagedModelNotificationRecordResponseDTO` properties. JSON: %s",
						entry.getKey(), jsonObj.toString()));
			}
		}
		if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
			JsonArray jsonArraycontent = jsonObj.getAsJsonArray("content");
			if (jsonArraycontent != null) {
				// ensure the json data is an array
				if (!jsonObj.get("content").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format("Expected the field `content` to be an array in the JSON string but got `%s`",
									jsonObj.get("content").toString()));
				}

				// validate the optional field `content` (array)
				for (int i = 0; i < jsonArraycontent.size(); i++) {
					NotificationRecordResponseDTO.validateJsonObject(jsonArraycontent.get(i).getAsJsonObject());
				}
				;
			}
		}
		if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
			JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
			if (jsonArraylinks != null) {
				// ensure the json data is an array
				if (!jsonObj.get("links").isJsonArray()) {
					throw new IllegalArgumentException(
							String.format("Expected the field `links` to be an array in the JSON string but got `%s`",
									jsonObj.get("links").toString()));
				}

				// validate the optional field `links` (array)
				for (int i = 0; i < jsonArraylinks.size(); i++) {
					Link.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
				}
				;
			}
		}
		// validate the optional field `page`
		if (jsonObj.get("page") != null && !jsonObj.get("page").isJsonNull()) {
			PageMetadata.validateJsonObject(jsonObj.getAsJsonObject("page"));
		}
	}

	public static class CustomTypeAdapterFactory implements TypeAdapterFactory {

		@SuppressWarnings("unchecked")
		@Override
		public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
			if (!PagedModelNotificationRecordResponseDTO.class.isAssignableFrom(type.getRawType())) {
				return null; // this class only serializes
								// 'PagedModelNotificationRecordResponseDTO' and its
								// subtypes
			}
			final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
			final TypeAdapter<PagedModelNotificationRecordResponseDTO> thisAdapter = gson.getDelegateAdapter(this,
					TypeToken.get(PagedModelNotificationRecordResponseDTO.class));

			return (TypeAdapter<T>) new TypeAdapter<PagedModelNotificationRecordResponseDTO>() {
				@Override
				public void write(JsonWriter out, PagedModelNotificationRecordResponseDTO value) throws IOException {
					JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
					elementAdapter.write(out, obj);
				}

				@Override
				public PagedModelNotificationRecordResponseDTO read(JsonReader in) throws IOException {
					JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
					validateJsonObject(jsonObj);
					return thisAdapter.fromJsonTree(jsonObj);
				}

			}.nullSafe();
		}

	}

	/**
	 * Create an instance of PagedModelNotificationRecordResponseDTO given an JSON string
	 * @param jsonString JSON string
	 * @return An instance of PagedModelNotificationRecordResponseDTO
	 * @throws IOException if the JSON string is invalid with respect to
	 * PagedModelNotificationRecordResponseDTO
	 */
	public static PagedModelNotificationRecordResponseDTO fromJson(String jsonString) throws IOException {
		return JSON.getGson().fromJson(jsonString, PagedModelNotificationRecordResponseDTO.class);
	}

	/**
	 * Convert an instance of PagedModelNotificationRecordResponseDTO to an JSON string
	 * @return JSON string
	 */
	public String toJson() {
		return JSON.getGson().toJson(this);
	}

}
